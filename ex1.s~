.syntax unified

.include "efm32gg.s"

/////////////////////////////////////////////////////////////////////////////
//
// Exception vector table
// This table contains addresses for all exception handlers
//
/////////////////////////////////////////////////////////////////////////////

.section .vectors

	.long   stack_top               /* Top of Stack                 */
	.long   _reset                  /* Reset Handler                */
	.long   dummy_handler           /* NMI Handler                  */
	.long   dummy_handler           /* Hard Fault Handler           */
	.long   dummy_handler           /* MPU Fault Handler            */
	.long   dummy_handler           /* Bus Fault Handler            */
	.long   dummy_handler           /* Usage Fault Handler          */
	.long   dummy_handler           /* Reserved                     */
	.long   dummy_handler           /* Reserved                     */
	.long   dummy_handler           /* Reserved                     */
	.long   dummy_handler           /* Reserved                     */
	.long   dummy_handler           /* SVCall Handler               */
	.long   dummy_handler           /* Debug Monitor Handler        */
	.long   dummy_handler           /* Reserved                     */
	.long   dummy_handler           /* PendSV Handler               */
	.long   dummy_handler           /* SysTick Handler              */

	/* External Interrupts */
	.long   dummy_handler
	.long   gpio_handler            /* GPIO even handler */
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   gpio_handler            /* GPIO odd handler */
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler
	.long   dummy_handler

.section .text

/////////////////////////////////////////////////////////////////////////////
//
// Reset handler
// The CPU will start executing here after a reset
//
/////////////////////////////////////////////////////////////////////////////

	.globl  _reset
	.type   _reset, %function
	.thumb_func
_reset: 
	mov R1, 0x12121212

en_gpio_clk:
	ldr r1, cmu_base_addr
	
	ldr r2, [r1, #CMU_HFPERCLKEN0]
	
	mov r3, #1
	lsl r3, r3, #CMU_HFPERCLKEN0_GPIO
	orr r2, r2, r3
	
	str r2, [r1, #CMU_HFPERCLKEN0]
	
	
init_leds:	
	ldr r1, gpio_pa_base_addr
	
	mov r3, #0x2
	str r3, [r1, #GPIO_CTRL]
	mov r3, #0x55555555
	str r3, [r1, #GPIO_MODEH]
	mov r3, #0xaaaaaaaa
	
	str r3, [r1, #GPIO_DOUT]
	mov r4, #0xff
	mov r7, #0
	
init_btns:
	ldr r2, gpio_pc_base_addr
	mov r3, #0x33333333
	str r3, [r2, #GPIO_MODEL]
	mov r3, #0xFF
	str r3, [r2, #GPIO_DOUT]
	
loop:
	LDR  r3, [r2, #GPIO_DIN]
	MVN  r3, r3
	EOR  r4, r4, r3  //Create diff-string
	AND  r4, r4, r3  //Only check pressed buttons
check_left:
	AND  r5, r4, #1  //Check button 1 only
	CBZ  r5, check_right
	SUB  r7, r7, #1
	IT   mi // If negative:
	MOVMI  r7, #0
	B end_of_loop	
check_right:
	AND  r5, r4, #0x4  //Check button 3 only
	CBZ  r5, end_of_loop
	ADD  r7, r7, #1
	CMP  r7, #8
	IT   eq
	MOVEQ  r7, #7
	B end_of_loop
end_of_loop:
	MOV  r5, #1
	LSL  r5, r7
	MVN  r5, r5
	LSL  r5, #8
	STR  r5, [r1, #GPIO_DOUT]
	MOV  r4, r3
	B    loop
	
	
cmu_base_addr:
	.long CMU_BASE

gpio_pa_base_addr:
	.long GPIO_PA_BASE

gpio_pc_base_addr:
	.long GPIO_PC_BASE


/////////////////////////////////////////////////////////////////////////////
//
// GPIO handler
// The CPU will jump here when there is a GPIO interrupt
//
/////////////////////////////////////////////////////////////////////////////

    .thumb_func
gpio_handler:  
	

/////////////////////////////////////////////////////////////////////////////

    .thumb_func
dummy_handler:  
	b .  // do nothing

